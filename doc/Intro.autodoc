# Gurobify: Gurobify provides an interface to Gurobi from GAP.
#
# Copyright (c) 2017 - 2025 Jesse Lansdown
#
# This Source Code Form is subject to the terms of the Mozilla
# Public License, v. 2.0. If a copy of the MPL was not distributed
# with this file, You can obtain one at https://mozilla.org/MPL/2.0/.



@Chapter Introduction
	@Section Welcome to Gurobify

Gurobify is a &GAP;<Cite Key="GAP4"/> package which provides an interface to the optimisation software Gurobi<Cite Key="gurobi"/>.
<Br/><Br/>
Gurobify can be obtained from the Gurobify homepage:
* https://www.jesselansdown.com/Gurobify
Please use the issue tracker to inform me of any bugs or suggestions:
* https://github.com/jesselansdown/Gurobify/issues

	@Section Citing Gurobify

If Gurobify aids you in obtaining results that lead to a publication, please cite Gurobify as you would a paper. An example BibTeX entry for citing gurobify is given below. Check that the version number and doi correspond to the version that you used in your research. Please also send me an email informing me of the paper for my own interest!


@BeginLog
#!	@article{gurobify,
#!	Author = {Lansdown, Jesse},
#!	Doi = {10.5281/zenodo.5025558},
#!	Key = {gurobify},
#!	Title = {{Gurobify -- A GAP interface to Gurobi Optimizer, Version 2.0.1}},
#!	Url = {http://doi.org/10.5281/zenodo.5025558},
#!	Year = 2025,
#!	}
@EndLog

Here is the entry in the APA style which may be used directly in the bibliography environment of your LaTeX document.

@BeginLog
#! \bibitem[Lansdown(2025)]{gurobify}
#! J.~Lansdown.
#! \newblock {Gurobify -- A GAP interface to Gurobi Optimizer, Version 2.0.1}.
#! \newblock 2025.
#! \newblock \doi{10.5281/zenodo.5025558}.
#! \newblock URL \url{http://doi.org/10.5281/zenodo.5025558}.
@EndLog


	@Section Dependencies

Gurobify requires the following software to be installed.

* &GAP; 4.12 (or later)

* Gurobi 12.0 (or later)

* Autotools

Autotools may be installed on MacOSX using homebrew with the commands **brew install autoconf** and **brew install automake**.
If you want to regenerate the documentation for any reason, then the following will also be required.

* AutoDoc 2020.08.11 (or later)

* GAPDoc 1.6.4 (or later)

Although Gurobi is proprietary software, it is available free for academic use. According to the Gurobi website, 
$$ $$
"Gurobi makes most of our solvers available to recognized degree-granting academic institutions free of charge" <Cite Key="gurobiLicence2"/>,
<Br/><Br/>
and
<Br/><Br/>
"The free Academic License for Gurobi has all the features and performance of the full Gurobi Optimizer. A free Academic License  has no limits on model  size. The only  restrictions on the use of these licenses  are:

* They can only be used by faculty, students, or staff of a degree-granting academic institution

* They can only be used for research or educational purposes

* They must be validated from a recognized academic domain, as described below.

Note, free academic licenses expire twelve (12) months after the date on which your license was generated, but eligible faculty, students, or staff can renew a license by repeating the above process" <Cite Key="gurobiLicence1"/>.
<Br/><Br/>
For up-to-date information on Gurobi licences, please refer to the Gurobi website. A link can be found in the Appendix, or through a simple search online.





	@Section Installation

To install Gurobify, first extract it in the pkg directory of the &GAP; installation directory. You may place Gurobify in a different location, so long as its parent directory is called "pkg". Installing Gurobify outside of the &GAP; root pkg directory is not recommended, but is useful for example when administrative privileges are needed to access the &GAP; root directory. Next run the following command in the terminal from within the Gurobify directory.

@BeginLog
#! ./install.sh -g <gurobi path> -v <Gurobi version> [-r <gap path>]
@EndLog

The &#8208;g &lt;gurobi path&gt; is a necessary argument, and normally looks something like this on MacOSX,

<Br/><Br/>

&#8208;g /Library/gurobi1200/macos_universal2

<Br/><Br/>

or something like this on Linux,

<Br/><Br/>

&#8208;g /opt/gurobi701/linux64

<Br/><Br/>

The &#8208;g &lt;gurobi version&gt; is a necessary argument and should include the major and minor values. For example, for version 12.0.0 the value 120 should be used.

<Br/><Br/>

The [&#8208;r &lt;gap path&gt;] is an optional argument, and is not normally necessary if Gurobify is placed in the pkg directory of the &GAP; root directory. If, however, Gurobify is located in a non-root pkg directory, then this argument must be included. It normally looks something like this,

<Br/><Br/>

&nbsp;&#8208;r /opt/gap4r8/


	@Section Testing And Documentation

To test the package is working correctly, run the following command from inside the Gurobify directory.

@BeginLog
#! gap maketest.g
@EndLog

 It transforms each of the examples in Chapter 4 "Examples" and the example given in Section 2.2 "Simple Example" into test cases to check that Gurobify is functioning correctly.
<Br/><Br/>
Within the Gurobify directory there is a subdirectory called "doc". This directory contains the documentaion for Gurobify in the form of a pdf file called "manual.pdf" as well as in html format. To access the html version of the manual, open the file called "chap0.html". The documentation can be regenerated by running the following command in the terminal from the Gurobify directory, though this should not be necessary.

@BeginLog
#! gap makedoc.g
@EndLog

Regenerating the documentation will also automatically regenerate the "maketest.g" test file.
<Br/><Br/>
	@Section Loading Gurobify

Open &GAP; and load Gurobify with the command **LoadPackage("Gurobify");**. You should see the following.

@BeginLog
 LoadPackage("Gurobify");
#! -----------------------------------------------------------------------------
#! Loading  Gurobify 2.0.0 (Gurobify provides an interface to Gurobi from GAP.)
#! by Jesse Lansdown (www.jesselansdown.com).
#! Homepage: https://www.jesselansdown.com/Gurobify/
#!      Currently running Gurobi Optimizer 9.1.0
#! -----------------------------------------------------------------------------
#! true
@EndLog

Note that if you have Gurobify located somewhere other than the &GAP; root directory's pkg directory, then you must run &GAP; with the following command to enable &GAP; to find Gurobify.

@BeginLog
#! gap -l ";/alternative/path/to/Gurobify"
@EndLog

where **/alternative/path/to/Gurobify** is the path to the directory which contains **/pkg/Gurobify** as subdirectories.

	@Section Problems With The Installation

Please ensure that all dependencies are present, the correct paths have been used, and the correct versions of software are being used. There is also a section in the Appendix, "Troubleshooting The Installation", which deals with a number of issues people face when installing Gurobify, and suggests solutions.


@Chapter Getting Started
	@Section Getting Started

This section contains a simple example which demonstrates some of the key functionality of Gurobify.
We demonstrate the following:
* Creation of a Gurobi model, including specifying variable types and names
* Adding an objective function to the model and choosing its sense (maximise or minimise)
* Adding constraints to a model individually
* Adding multiple constraints to a model at one time
* Deleting constraints from a model
* Optimising a model
* Querying the optimisation status of a model
* Displaying the solution to a feasible model
* Setting a parameter (in this case the time limit)
* Querying the current value of a parameter (again, the time limit)
* Writing a model to a file
* Reading a model from a file

The purpose of this example is to illustrate the use of Gurobify in a quick, simple manner. The example itself is trivial, but the same procedure applies for much more complex models. It only utilises some of the core commands available in Gurobify, though more commands are listed in detail in Chapter 3 "Using Gurobify", and further examples are given in Chapter 4 "Examples".

	@Section Simple Example

@Chapter Using Gurobify

	This chapter documents the various commands available in Gurobify. Each command begins with "Gurobi", which in some instances helps to avoid conflict with other &GAP; commands, and is used for consistancy in other instances. It is important to note that many changes to a model do not become active until the model is updated. This can be done by either optimising the model, or calling GurobiUpdateModel. It is often unnecessary to update the model if it will later be optimised, and in fact can be more efficient to only update when necessary. However, one may occasionally wish to perform a command which is dependent on previous changes to the model. In this case it is necessary to call the update command first.

	@Section Creating Or Reading A Model

	This section deals with reading, writing, and creating models, as well as working with the model variables.

	@Section Adding And Deleting Constraints

	This section deals with adding linear constraints, both individually and in bulk, and also naming and deleting constraints.

	@Section Adding And Modifying Objective Functions

	This section deals with adding and modifying objective functions to a model, and changing between maximising and minimising objective functions.

	@Section Optimising A Model

	This section deals with optimising a model, and handling solution information.

	@Section Querying Attributes And Parameters

	This section deals with obtaining information about attributes and parameters of a Gurobi model. Note that a model must be updated or optimised before parameters and attributes are updated - any queries will return the values at the time the model was last updated or optimised. Note also that the attributes are Gurobi attributes, and are not true attributes in the &GAP; sense. Crucially, attributes for a model constantly change, either as a result of optimisation or from manually setting them. Thus attributes for Gurobi models are approximated by Gurobify using &GAP; operations or functions. Their usage should still be comfortable for users familiar with &GAP; attributes.

	@Section Querying Other Attributes And Parameters

	In addition to the specific queries given in the previous section, other gurobi parameters and attributes of specific value types can also be queried. The parameter or attribute name must be given as a string exactly as stated in the Gurobi documentation. See the Appendix for links to the relevant documentation.

	@Section Modifying Attributes And Parameters

	This section deals with modifying the values of attributes and parameters of Gurobi models. Note that a model must be updated or optimised before parameters and attributes are updated. Any queries or commands which depend on these values will use the values at the time the model was last updated or optimised, even if the values have since been modified.

	@Section Modifying Other Attributes And Parameters
	In addition to these specific commands given in the previous section, other gurobi parameters and attributes of specific value types can be modified. The parameter or attribute name must be given as a strings exactly as stated in the Gurobi documentation. See the Appendix for links to the relevant documentation.

	@Section Additional Functionality
	This section provides information on some additional functionality which does
	not directly relate to Gurobi but may assist in using the Gurobify package. In particular, it details 
	functions which convert between characteristic vectors (which are more desirable for use with Gurobi) and sets (which may be more desirable for use in &GAP;).

	@Section Other
	This section documents Gurobify functionality not belonging in any of the other sections.

@Chapter Examples

This section contains a number of examples which are intended to illustrate the usage of Gurobify. These examples also form a test suite (along with "Simple Example" in Chapter 2), which can be used to check that Gurobify is functioning properly. See Section 1.5 "Testing and documentation" for more on this aspect of the examples.

@Chapter Appendix

	@Section Gurobify Links

* Homepage: https://www.jesselansdown.com/Gurobify/
* Issue tracker: https://github.com/jesselansdown/Gurobify/issues

	@Section &GAP; Links

* Homepage: http://gap-system.org/

	@Section Gurobi Links

* Homepage: http://gurobi.com/

For more information on Gurobi parameters, attributes, and status codes, see the following links:

* Attributes: http://www.gurobi.com/documentation/7.0/refman/attributes.html

* Parameters: http://www.gurobi.com/documentation/7.0/refman/parameters.html

* Status codes: https://www.gurobi.com/documentation/7.0/refman/optimization_status_codes.html

* Licencing: http://www.gurobi.com/products/licensing-pricing/licensing-overview

	@Section Optimisation Status Codes

The information in this section on optimisation status codes is taken directly from the Gurobi website<Cite Key="gurobiStatusCodes"/>.

* 1 -	Model is loaded, but no solution information is available.
* 2 - Model was solved to optimality (subject to tolerances), and an optimal solution is available.
* 3 - Model was proven to be infeasible.
* 4 -	Model was proven to be either infeasible or unbounded. To obtain a more definitive conclusion, set the DualReductions parameter to 0 and reoptimize.
* 5 - Model was proven to be unbounded. Important note: an unbounded status indicates the presence of an unbounded ray that allows the objective to improve without limit. It says nothing about whether the model has a feasible solution. If you require information on feasibility, you should set the objective to zero and reoptimize.
* 6 - Optimal objective for model was proven to be worse than the value specified in the Cutoff parameter. No solution information is available.
* 7 - Optimization terminated because the total number of simplex iterations performed exceeded the value specified in the IterationLimit parameter, or because the total number of barrier iterations exceeded the value specified in the BarIterLimit parameter.
* 8 - Optimization terminated because the total number of branch-and-cut nodes explored exceeded the value specified in the NodeLimit parameter.
* 9 - Optimization terminated because the time expended exceeded the value specified in the TimeLimit parameter.
* 10 - Optimization terminated because the number of solutions found reached the value specified in the SolutionLimit parameter.
* 11 - Optimization was terminated by the user.
* 12 - Optimization was terminated due to unrecoverable numerical difficulties.
* 13 - Unable to satisfy optimality tolerances; a sub-optimal solution is available.
* 14 - An asynchronous optimization call was made, but the associated optimization run is not yet complete.
* 15 - User specified an objective limit (a bound on either the best objective or the best bound), and that limit has been reached.


	@Section Troubleshooting The Installation

	@Subsection Typical Sources Of Error During Installation

Common sources of error during installation include:
* Forgetting to run ./install.sh
* Not having autotools installed. On a mac this can be done using brew, and checking all necessary dependencies are available with Brew Doctor. 
* Not putting the correct paths to Gurobi (or &GAP; if not in the default "pkg" directory) when running "configure". Sometimes the paths are correct but incomplete, eg missing "linux64" or "mac64" at the end. Compare with the example paths given in the installation section of the manual.
* Having incorrect versions of &GAP; or Gurobi.

	@Subsection Specific Errors

* The compiler gives warnings when running "make"

This seems to be due to the way &GAP; stores integers, but it doesn't affect the function of the program. If no errors are given the installation is generally ok. Test the installation by loading Gurobify and running the test cases.

* Compilation is successful, but &GAP; cannot load the package, giving an error such as:

@BeginLog
#! gap> LoadPackage("Gurobify");
#! #W dlopen() error: libgurobi70.so: cannot open shared\
#! object file: No such file or directory
#! Error, module '/home/linux/gap4r8/pkg/Gurobify/bin\
#! /x86_64-pc-linux-gnu-gcc-default64/Gurobify.so'
@EndLog

This is caused by &GAP; not being able to find the Gurobi binary.
When installing Gurobify, you were required to enter the path to Gurobi in the configure stage. If this path is "gurobi_path", then navigate to "gurobi_path/lib" in the terminal. You should now be able to load Gurobify when running &GAP; from this location. It can be fixed by running the following:

@BeginLog
#! LD_LIBRARY_PATH=gurobi_path/lib:$LD_LIBRARY_PATH
@EndLog

where "gurobi_path/lib" is as above. This will only be valid for the current session, to make this change permanent the line must be added to the .bash_profile file.


* Compilation is successful, but &GAP; cannot load Gurobify, giving an error such as:

@BeginLog
#! gap> LoadPackage("Gurobify");
#! dyld: lazy symbol binding failed: Symbol not found: _RegisterPackageTNUM
#!   Referenced from: /usr/local/lib/gap4r7/pkg/Gurobify-1.1.0/bin\
#!   /x86_64-apple-darwin14.3.0-gcc-default64/Gurobify.so
#!   Expected in: flat namespace
@EndLog

Gurobify requires &GAP; version 4.8 or higher.

* Gurobify will not compile, giving an error such as:

@BeginLog
#! src/Gurobify.c:12:10: fatal error: 'gurobi_c.h' file not found
@EndLog

Check that you have entered the correct path for Gurobi during installation.

* Gap gives an error like the following when trying to load Gurobify:

@BeginLog
#! gap> LoadPackage("Gurobify");
#! Error, Error: failed to create new environment. in
#!   if not LOAD_DYN( arg[1], false ) then
#!     Error( "no support for dynamic loading" );
#! fi; at /usr/local/lib/gap-4.10.0/lib/files.gd:583 called from 
#! <function "LoadDynamicModule">( <arguments> )
#!  called from read-eval loop at /usr/local/lib/gap-4.10.0/pkg/Gurobify/init.g:8
#! type 'quit;' to quit to outer loop
@EndLog

Check that Gurobi's licese is up-to-date.

	@Section Example LP file

Shown below is the LP file, "test.lp", written during the simple example in Section 1.

@BeginLog
#! \ Model created with Gurobify - A GAP interface to Gurobi Optimizer.
#! \ LP format - for model browsing. Use MPS format to capture full model detail.
#! Minimize
#!   x + 2 y + z
#! Subject To
#!  UnNamedConstraint: 2 x + 2 y + 2 z <= 6
#!  UnNamedConstraint: x + 2 y + 3 z >= 5
#!  UnNamedConstraint: 2 x + 2 y + 2 z <= 6
#!  UnNamedConstraint: x + 2 y + 3 z >= 5
#! Bounds
#! Binaries
#!  x y z
#! End
@EndLog
